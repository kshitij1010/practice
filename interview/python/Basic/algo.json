[
        {
                "q_num": 1,
                "type": "algo",
                "sub_type": "Search & Sort",
                "description": "Breadth First Search or BFS for a Graph",
                "solution": "reference/algo/search_sort/ex_bfs.py"
        },
        {
                "q_num": 2,
                "type": "algo",
                "sub_type": "Search & Sort",
                "description": "Depth First Search or DFS for a Graph",
                "solution": "reference/algo/search_sort/ex_dfs.py"
        },
        {
                "q_num": 3,
                "type": "algo",
                "sub_type": "Search & Sort",
                "description": "Binary search (for the sorted array)",
                "solution": "reference/algo/search_sort/ex_binary_search.py"
        },
        {
                "q_num": 4,
                "type": "algo",
                "sub_type": "Search & Sort",
                "description": "Merge Sort",
                "solution": "reference/algo/search_sort/ex_merge_sort.py"
        },
        {
                "q_num": 5,
                "type": "algo",
                "sub_type": "Search & Sort",
                "description": "Quick Sort",
                "solution": "reference/algo/search_sort/ex_quick_sort.py"
        },
        {
                "q_num": 6,
                "type": "algo",
                "sub_type": "Search & Sort",
                "description": "Topological Sort",
                "solution": "reference/algo/search_sort/ex_topological_sort.py"
        },
        {
                "q_num": 101,
                "type": "algo",
                "sub_type": "DFS",
                "description": "Letter Combinations of a Phone Number\nhttps://leetcode.com/problems/letter-combinations-of-a-phone-number/\nGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.",
                "example": "Eg-1,\nnput: digits = '23'\nutput: ['ad','ae','af','bd','be','bf','cd','ce','cf']\ng-2,\nnput: digits = ''\nutput: []\ng-3,\nnput: digits = '2'\nutput: ['a','b','c']",
                "solution": "reference/algo/dfs_backtracking/dfs1.py"
        },
        {
                "q_num": 102,
                "type": "algo",
                "sub_type": "DFS",
                "description": "Generate Parentheses\nhttps://leetcode.com/problems/generate-parentheses/\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
                "example": "Eg-1,\nInput: n = 3\nOutput: ['((()))','(()())','(())()','()(())','()()()']\nEg-2,\nInput: n = 1\nOutput: ['()']",
                "solution": "reference/algo/dfs_backtracking/dfs2.py"
        },
        {
                "q_num": 103,
                "type": "algo",
                "sub_type": "DFS",
                "description": "N-Queens\nhttps: //leetcode.com/problems/n-queens/\nplace N queens so that none of the queen attacks each other in NxN chess board",
                "solution": "reference/algo/dfs_backtracking/dfs3.py"
        },
        {
                "q_num": 104,
                "type": "algo",
                "sub_type": "DFS",
                "description": "Number of Islands\nhttps://leetcode.com/problems/number-of-islands/\nGiven an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
                "solution": "reference/algo/dfs_backtracking/dfs4.py"
        },
        {
                "q_num": 105,
                "type": "algo",
                "sub_type": "DFS",
                "description": "BoggleBoard\nGiven a dictionary, a method to do lookup in dictionary and a M x N board where every cell has one character.\nFind all possible words that can be formed by a sequence of adjacent characters.\nNote that we can move to any of 8 adjacent characters, but a word should not have multiple instances of same cell.",
                "solution": "reference/algo/dfs_backtracking/dfs5.py"
        },
        {
                "q_num": 201,
                "type": "algo",
                "sub_type": "DP",
                "description": "Climbing Stairs\nYou are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\nhttps: //leetcode.com/problems/climbing-stairs/",
                "example": "Eg-1,\nInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\nEg-2,\nInput: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step",
                "solution": "reference/algo/dp/dp1.py"
        },
        {
                "q_num": 202,
                "type": "algo",
                "sub_type": "DP",
                "description": "Coin Change\nYou are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\nYou may assume that you have an infinite number of each kind of coin.\nhttps://leetcode.com/problems/coin-change/",
                "example": "Eg-1,\nInput: coins = [1,2,5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1\nEg-2,\nInput: coins = [2], amount = 3\nOutput: -1\nEg-3,\nInput: coins = [1], amount = 0\nOutput: 0\nEg-4,\nInput: coins = [1], amount = 2\nOutput: 2",
                "solution": "reference/algo/dp/dp2.py"
        },
        {
                "q_num": 203,
                "type": "algo",
                "sub_type": "DP",
                "description": "Longest Increasing Subsequence\nFind the Longest Increasing Subsequence\nhttps://leetcode.com/problems/longest-increasing-subsequence/\nGiven an array of numbers, find the length of the longest increasing subsequence in the array.\nThe subsequence does not necessarily have to be contiguous.",
                "example": " Example,\nInput: [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15],\nOutput: 6 (Explanation: the increasing arr is 0, 2, 6, 9, 11, 15)",
                "solution": "reference/algo/dp/dp3.py"
        },
        {
                "q_num": 204,
                "type": "algo",
                "sub_type": "DP",
                "description": "Find the Longest increasing subsequence with the highest sum\nhttps://www.youtube.com/watch?v=99ssGWhLPUE",
                "example": "Example,\nInput: [4, 6, 1, 3, 8, 4, 6]\nOutput: [4, 6, 8] (sums to  18 which is the highest sum)",
                "solution": "reference/algo/dp/dp4.py"
        },
        {
                "q_num": 205,
                "type": "algo",
                "sub_type": "DP",
                "description": "Word Break\nGiven a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words./nNote that the same word in the dictionary may be reused multiple times in the segmentation.\nhttps://leetcode.com/problems/word-break/",
                "example": "Eg-1,\nInput: s = 'leetcode', wordDict = ['leet','code']\nOutput: true\nExplanation: Return true because 'leetcode' can be segmented as 'leet code'.\nEg-2,\nInput: s = 'applepenapple', wordDict = ['apple','pen']\nOutput: true\nExplanation: Return true because 'applepenapple' can be segmented as 'apple\npen apple'.\nNote that you are allowed to reuse a dictionary word.\nEg-3.py\nInput: s = 'catsandog', wordDict = ['cats','dog','sand','and','cat']\nOutput: false",
                "solution": "reference/algo/dp/dp5.py"
        },
        {
                "q_num": 206,
                "type": "algo",
                "sub_type": "DP",
                "description": "largest square of 1's in 2d matrix",
                "example": "example,\n1 1 0 1 0\n0 1 1 1 0\n1 1 1 1 0\n0 1 1 1 0\noutput: 3 (since 3X3 is the largest square in this matrix)",
                "solution": "reference/algo/dp/dp6.py"
        },
        {
                "q_num": 207,
                "type": "algo",
                "sub_type": "DP",
                "description": "You’re testing a new driverless car that is located at the Southwest (bottom-left) corner of an n×n grid.\nThe car is supposed to get to the opposite, Northeast (top-right), corner of the grid. Given n, the size of the grid’s axes,\nwrite a function numOfPathsToDest that returns the number of the possible paths the driverless car can take.\nThe car must abide by the following two rules: it cannot cross the diagonal border.\nIn other words, in every step the position (i,j) needs to maintain i >= j.\nSee the illustration above for n = 5.\nIn every step, it may go one square North (up), or one square East (right), but not both.",
                "example": "E.g. if the car is at (3,1), it may go to (3,2) or (4,1).\nexample,\nGiven matrix\n1 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 9\nFind the path to reach from 9 to 1 or 1 to 9 using area as follow. (- is\nblocked area)\n1 - - -\n0 0 - -\n0 0 0 -\n0 0 0 9",
                "solution": "reference/algo/dp/dp7.py"
        }
]
