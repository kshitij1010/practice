SQL – structured query language
########################  _______MANIPULATION______ 
A relational database is a database that organizes information into one or more tables.
SQL is a programming language designed to manipulate and manage data stored in relational databases.
SQL language is to retrieve information stored in a database This is commonly referred to as querying.
A table is a collection of data organized into rows and columns. Tables are sometimes referred to as relations. Here the table is “celebs”.
A column is a set of data values of a particular type. Here “id, name, and age” are each column. 
A row is a single record in a table. The first row in the celebs table has:
					An “id” of 1
					A “name” of Justin Bieber
					An “age” of 22

All data stored in a relational database is of a certain data type. Some of the most common data types are:
1. Integer, a positive or negative whole number 
2. Text, a text string 
3. Date, the date formatted as YYYY-MM-DD for the year, month, and day 
4. Real, a decimal value 

______________________________________

____To show full table:
		SELECT * FROM table_name;
Example. 	SELECT * FROM celebs;  //to show all the columns and rows
		SELECT name, imdb_rating FROM movies;   //to show multiple column

____To create table:
		CREATE TABLE table_name (column_1 data_type, column_2 data_type, column_3 data_type);
Example.	CREATE TABLE celebs (id INTEGER, name TEXT, age INTEGER);

____Insert value in table:
INSERT statement inserts new rows into a table. You can use the INSERT statement when you want to add new records
		INSERT INTO CELEBS (id, name, age)	Values (1, 'Justin', 21);

____To change or edit or update value of table elements
		update celebs set age=22 where id=1;

____to add column into existing table
		ALTER TABLE celebs ADD COLUMN new_column_name data_type;
Example.	ALTER TABLE celebs ADD COLUMN twitter_handle TEXT;

_____ to Delete all of the rows that have a NULL value in the mentioned column.
(NULL is a condition in SQL that returns true when the value is NULL and false otherwise.)
		DELETE FROM table_name WHERE column_name is NULL;
Example.	delete from celebs where twitter_handle is null;

**
“CREATE TABLE” creates a new table.
“INSERT INTO” adds a new row to a table.
“SELECT” queries data from a table.
“UPDATE” edits a row in a table.
“ALTER TABLE” changes an existing table.
“DELETE FROM” deletes rows from a table.
**

#################################

##################################_______QUERIES________
__________________________________
**
WHERE” is a clause that indicates you want to filter the result set to include only rows where the following condition is true.
Operators create a condition that can be evaluated as either true or false. Common operators used with the WHERE clause are:
= equals
!= not equals
> greater than
< less than
>= greater than or equal to
<= less than or equal to
**
____SELECT DISTINCT is used to return unique values in the result set. It filters out all duplicate values.
		SELECT DISTINCT column_name FROM table_name;
Example.	SELECT DISTINCT genre FROM movies;

____Direct condition:
____ To show rows of matching criteria (as shown in example, this commands only show movies’ rows with imdb_rating above 8
		SELECT * FROM table_name WHERE column_name > benchmark_value;	
		SELECT * FROM table_name WHERE Condition_or_criteria;	
Example.	SELECT * FROM movies WHERE imdb_rating > 8;

____missing characters condition
____ LIKE can be a useful operator when you want to compare similar values.
LIKE is a special operator used with the WHERE clause to search for a specific pattern in a column.
“_” wildcard character, the _ means you can substitute any individual character here without breaking the pattern
		SELECT * FROM table_name WHERE column_name LIKE "Se_en";
Example.	SELECT * FROM movies WHERE name LIKE "Se_en";
	Here, Se_en represents a pattern with a wildcard character.
	The names Seven and Se7en both match this pattern.
Example.	SELECT * FROM movies WHERE name LIKE "a%";
“%” is a wildcard character that matches zero or more missing letters in the pattern.
	A% matches all movies with names that begin with "A"
	%a matches all movies that end with "a"

____condition of range
____
		SELECT * FROM table_name WHERE column_name BETWEEN range_start AND range_end;
Example.	SELECT * FROM movies WHERE name BETWEEN 'A' AND 'J';
		SELECT * FROM movies WHERE year BETWEEN 1990 AND 2000;
____two Conditions together
____ “AND”  and “OR” is an operator that combines two conditions
Example.	SELECT * FROM movies WHERE year BETWEEN 1990 AND 2000 AND genre = "comedy";
		SELECT * FROM movies WHERE genre = "comedy" OR year< 1980;
____ Sorting the results specific column wise
ORDER BY is a clause that indicates you want to sort the result set by a particular column either alphabetically or numerically.
"DESC" is a keyword in SQL that is used with ORDER BY to sort the results in descending order (high to low or Z-A). 
"ASC" is a keyword in SQL that is used with ORDER BY to sort the results in ascending order (Low to high or A-Z).
		SELECT * FROM table_name ORDER BY column_name DESC;
Example.	SELECT * FROM movies ORDER BY imdb_rating DESC;

____"LIMIT" is a clause that lets you specify the maximum number of rows the result set will have. 
		SELECT * FROM table_name ORDER BY column_name ASC LIMIT num_of_rows_2_show
Example.	SELECT * FROM movies ORDER BY imdb_rating ASC LIMIT 3;

**
“SELECT” is the clause you use every time you want to query information from a database.
“WHERE” is a popular command that lets you filter the results of the query based on conditions that you specify.
“LIKE” and “BETWEEN” are special operators that can be used in a WHERE clause
“AND” and “OR” are special operators that you can use with WHERE to filter the query on two or more conditions.
“ORDER BY” lets you sort the results of the query in either ascending or descending order.
“LIMIT” lets you specify the maximum number of rows that the query will return. This is especially important in large tables that have thousands or even millions of rows.
**
#####################################

###############################_______ AGGREGATE FUNCTIONS______

____Count number of rows
The fastest way to calculate the number of rows in a table is to use the COUNT() function.
COUNT() is a function that takes the name of a column as an argument and counts the number of rows where the column is not NULL. Here, we want to count every row so we pass * as an argument.
		SELECT COUNT(column_name) FROM table_name;
Example.	SELECT COUNT(*) FROM fake_apps;	//to count rows in whole table
		SELECT COUNT(category) FROM fake_apps;  /to count rows in “category” column

____Count function with condition
		Select count(*) from table_name Where condition;
Example.	Select count(*) from fake_apps Where price=0;

____ to Count the number of rows of specific group in column. 
		SELECT column_name, COUNT(*) FROM table_name GROUP BY column_name;
to Count the number of apps at each price. 
Example.	SELECT price, COUNT(*) FROM fake_apps GROUP BY price;
		SELECT price, COUNT(*) FROM fake_apps WHERE downloads>20000 GROUP BY price;

____to find total of any column
SUM() is a function that takes the name of a column as an argument and returns the sum of all the values in that column
		SELECT SUM(column_name) FROM table_name;
Example.	SELECT SUM(downloads) FROM fake_apps;

____ Calculate the total number of downloads for each category. 
		SELECT category_column_name, SUM(column_name_4_total) FROM name_tabel GROUP BY category_column_name;
Example.	SELECT category, SUM(downloads) FROM fake_apps GROUP BY category;

_____Find maximum number in the column
MAX() is a function that takes the name of a column as an argument and returns the largest value in that column. . (**It will show the first element, which shows up first as descending order(z-a) for Column with alphabets only)
		SELECT MAX(column_name) FROM table_name;
Example.	SELECT MAX(downloads) FROM fake_apps;
_____Find minimum number in the column
MIN() is a function that takes the name of a column as an argument and returns the smallest value in that column.	(**It will show the first element, which shows up first as descending order(z-a) for Column with alphabets only)
Example.	SELECT MIN(downloads) FROM fake_apps;
		SELECT name, category, MIN(downloads) FROM fake_apps GROUP BY category;//to show names of the apps in each category with least downloads
_____Find maximum number in the column
AVG() is a function that takes the name of a column as an argument and returns the average value of that column. (It will show 0.0 for Column with alphabets only)
		SELECT AVG(column_name) FROM table_name;
Example.	SELECT AVG(downloads) FROM fake_apps;
______ROUND() is a function that takes a column name and an integer as an argument. It rounds the values in the column to the number of decimal places specified by the integer. Here, we pass the column AVG(downloads) and 2 as arguments
Example.	SELECT price, ROUND(AVG(downloads), 2) FROM fake_apps GROUP BY price;

**
Aggregate functions combine multiple rows together to form a single value of more meaningful information.
“COUNT” takes the name of a column(s) as an argument and counts the number of rows where the value(s) is not NULL.
“GROUP BY” is a clause used with aggregate functions to combine data from one or more columns.
“SUM()” takes the column name as an argument and returns the sum of all the values in that column.
“MAX()” takes the column name as an argument and returns the largest value in that column.
“MIN()” takes the column name as an argument and returns the smallest value in that column.
“AVG()” takes a column name as an argument and returns the average value for that column.
“ROUND()” takes two arguments, a column name and the number of decimal places to round the values in that column.
**
###########################################

########################################_________MULTIPLE TABLES__________

_____A primary key serves as a unique identifier for each row or record in a given table. The primary key is literally an id value for a record. We're going to use this value to connect artists to the albums they have produced.

By specifying that the id column is the PRIMARY KEY, SQL makes sure that:

None of the values in this column are NULL
Each value in this column is unique
A table cannot have more than one PRIMARY KEY column.
		CREATE TABLE artists(id INTEGER PRIMARY KEY, name TEXT);

_____a single query that combines data from two tables (albums and artists are name of tables in ex.)

	SELECT table_n.column_x, table_n.column_y, table_m.column_x FROM table_n, table_y;
Example.	SELECT albums.name, albums.year, artists.name FROM albums, artists;

_____
In SQL, joins are used to combine rows from two or more tables. The most common type of join in SQL is an inner join.

An inner join will combine rows from different tables if the join condition is true. Let's look at the syntax to see how it works.

-SELECT * specifies the columns our result set will have. Here, we want to include every column in both tables.
-FROM albums specifies the first table we are querying.
-JOIN artists ON specifies the type of join we are going to use as well as the name of the second table. Here, we want to do an inner join and the second table we want to query is artists.
-albums.artist_id = artists.id is the join condition that describes how the two tables are related to each other. Here, SQL uses the foreign key column artist_id in the albums table to match it with exactly one row in the artists table with the same value in the id column. We know it will only match one row in the artists table because id is the PRIMARY KEY of artists.

Example.		SELECT * FROM albums JOIN artists ON albums.artist_id = artists.id;

_____
Outer joins also combine rows from two or more tables, but unlike inner joins, they do not require the join condition to be met. Instead, every row in the left table is returned in the result set, and if the join condition is not met, then NULL values are used to fill in the columns from the right table.

The left table is simply the first table that appears in the statement. Here, the left table is albums. Likewise, the right table is the second table that appears. Here, artists is the right table.

Example.		SELECT * FROM albums LEFT JOIN artists ON albums.artist_id = artists.id;



______AS is a keyword in SQL that allows you to rename a column or table using an alias

	SELECT 
		 albums.name AS 'Album', 
		 albums.year, 
		 artists.name AS "Artist" 
	FROM 
	  	albums 
	JOIN artists ON 
		albums.artist_id = artists.id 
	WHERE 
		albums.year > 1980;
	

**
-“Primary Key” is a column that serves a unique identifier for row in the table. Values in this column must be unique and cannot be NULL.
-“Foreign Key” is a column that contains the primary key to another table in the database. It is used to identify a particular row in the referenced table.
-“Joins” are used in SQL to combine data from multiple tables.
-“INNER JOIN” will combine rows from different tables if the join condition is true.
-“LEFT OUTER JOIN” will return every row in the left table, and if the join condition is not met, NULL values are used to fill in the columns from the right table.
-“AS” is a keyword in SQL that allows you to rename a column or table in the result set using an alias.
**
##############################################
